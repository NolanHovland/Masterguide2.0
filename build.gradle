import org.gradle.internal.os.OperatingSystem
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

plugins {
  id 'cpp'
  id 'java'
  id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '2.1'
  id 'edu.wpi.first.NativeUtils' version '2.0.1'
  id 'edu.wpi.first.GradleVsCode' version '0.3.0'
}

// Ensure that the WPILibVersioningPlugin is setup by setting the release type, if releaseType wasn't
// already specified on the command line
if (!hasProperty('releaseType')) {
    WPILibVersion {
        releaseType = 'DEV'
    }
}

apply from: "options.gradle"
apply from: 'config.gradle'

ext.sharedFrcConfigs = [CTRE_Phoenix: ['linux:athena']]
ext.sharedCCIConfigs = [CTRE_Phoenix: []]
ext.sharedConfigsJustWind = [CTRE_Phoenix : ['windows:x86-64', 'windows:x86']] 

apply from: 'dependencies.gradle'

model {
  exportsConfigs {
      CTRE_Phoenix(ExportsConfig) {
          x86ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                '_CT??_R0?AVbad_cast',
                                '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                '_TI5?AVfailure']
          x64ExcludeSymbols = ['_CT??_R0?AV_System_error', '_CT??_R0?AVexception', '_CT??_R0?AVfailure',
                                '_CT??_R0?AVbad_cast',
                                '_CT??_R0?AVruntime_error', '_CT??_R0?AVsystem_error', '_CTA5?AVfailure',
                                '_TI5?AVfailure']
      }
  }

  components {
    CTRE_Phoenix(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDirs 'src/main/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/main/native/include'
          }
        }
      }
    }
  }
 
  binaries {
    //If we are not building for windows, don't bother with the shared library
    withType(SharedLibraryBinarySpec) {
      if(it.component.name == 'CTRE_Phoenix') {
        if (it.targetPlatform.operatingSystem.name != 'windows') {
          it.buildable = false
        }
      }
      cppCompiler.define "POST_WPI_LLVM_MOVE"
    }
    withType(StaticLibraryBinarySpec) {
        cppCompiler.define "POST_WPI_LLVM_MOVE"
    }
  }
}

apply from: 'publish.gradle'

publish.dependsOn check

wrapper {
  gradleVersion = '4.9'
}
